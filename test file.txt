from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from sqlalchemy.orm import relationship

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'
db = SQLAlchemy(app)
ma = Marshmallow(app)



class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    phone = db.Column(db.String(20), nullable=False)


class ClientUser(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    client_id = db.Column(db.Integer, db.ForeignKey('client.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())
    deleted_at = db.Column(db.DateTime)
    active = db.Column(db.Boolean, default=True)


class Company(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), unique=True, nullable=False)
    users = relationship('User', backref='company')


class Client(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    company_id = db.Column(db.Integer, db.ForeignKey('company.id'), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    phone = db.Column(db.String(20), nullable=False)


#---- Schemas
class UserSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = User


class ClientUserSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = ClientUser


class CompanySchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Company


class ClientSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Client


#Endpoints


@app.route('/users', methods=['GET'])
def get_users():
    username_filter = request.args.get('username', '')
    users = User.query.filter(User.username.like(f'%{username_filter}%')).all()
    user_schema = UserSchema(many=True)
    return jsonify(user_schema.dump(users))


@app.route('/users/<int:user_id>', methods=['PUT'])
def update_user(user_id):
    user = User.query.get(user_id)
    if not user:
        return jsonify({'error': 'User not found'}), 404

    data = request.json
    for key, value in data.items():
        setattr(user, key, value)

    db.session.commit()
    return jsonify({'message': 'User updated successfully'})


@app.route('/clients', methods=['POST'])
def create_client():
    data = request.json
    existing_client = Client.query.filter_by(company_id=data['company_id']).first()
    if existing_client:
        return jsonify({'error': 'Company already taken by another client'}), 400

    new_client = Client(**data)
    db.session.add(new_client)
    db.session.commit()
    return jsonify({'message': 'Client created successfully'})


@app.route('/clients/<int:client_id>', methods=['PATCH'])
def update_client(client_id):
    client = Client.query.get(client_id)
    if not client:
        return jsonify({'error': 'Client not found'}), 404

    data = request.json
    for key, value in data.items():
        setattr(client, key, value)

    db.session.commit()
    return jsonify({'message': 'Client updated successfully'})


if __name__ == '__main__':
    db.create_all()
    app.run(debug=True)




-----------------------------

#database section 
Queries
3.1.1
SELECT * FROM company WHERE employees BETWEEN 500 AND 2000;

3.1.2
a)

SELECT client.* FROM client
JOIN user ON client.user_id = user.id
WHERE user.username = 'desired_username';

3.1.2
b)

SELECT client.*
FROM client
JOIN company ON client.company_id = company.id
WHERE company.name LIKE '%desired_name%';



3.1.3

WITH max_revenue_per_industry AS (
  SELECT industry, MAX(revenue) AS max_revenue
  FROM company
  GROUP BY industry
)

SELECT company.*
FROM company
JOIN max_revenue_per_industry ON company.industry = max_revenue_per_industry.industry
WHERE company.revenue = max_revenue_per_industry.max_revenue;


step 5

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_security import Security, SQLAlchemyUserDatastore, UserMixin, RoleMixin, login_required, roles_required

# Your existing setup code for Flask, SQLAlchemy, and Marshmallow

# User and Role Models
class Role(db.Model, RoleMixin):
    # Definition of your Role model, including 'name' and 'description'

class User(db.Model, UserMixin):
    # Definition of your User model, including 'username', 'email', 'phone', and 'roles'

# ... Your existing code for Client, Company, etc.

# Endpoint with security requirement
@app.route('/clients', methods=['POST'])
@roles_required('ROLE_ADMIN')
def create_client():
    # Your existing logic for creating a new client
    pass

# Your existing code for creating the database tables and running the app
6.1.1
def test_single_company_with_more_than_200000_employees():
    company_count = Company.query.filter(Company.employees > 200000).count()
    assert company_count == 1, "There should be only 1 company with more than 200,000 employees."


6.1.2
def test_role_user_cannot_create_user():
    # Assuming you have a testing user with ROLE_USER role
    with app.test_client() as client:
        response = client.post('/users', json={'username': 'test_user', 'email': 'test@example.com', 'phone': '123456789'})
        assert response.status_code == 403, "Role_USER should not be able to create a User."


6.1.3

def test_create_client():
    with app.test_client() as client:
        response = client.post('/clients', json={'name': 'TestClient', 'user_id': 1, 'company_id': 1, 'email': 'testclient@example.com', 'phone': '987654321'})
        assert response.status_code == 200, "Client creation should return a success status code."


6.1.4

def test_e-commerce_companies_in_result():
    with app.test_client() as client:
        response = client.get('/clients')  # Assuming this endpoint returns a list of clients
        data = response.json

        assert response.status_code == 200, "Request for clients should return a success status code."
        assert any(client['company']['name'] == 'Amazon' for client in data), "Amazon should be in the result."
        assert any(client['company']['name'] == 'Google' for client in data), "Google should be in the result."
        assert not any(client['company']['industry'] == 'E-Commerce' and client['company']['name'] not in ['Amazon', 'Google'] for client in data), "No other E-Commerce companies should be in the result."


documentation

List App Users

Endpoint: GET /users
Parameters:
username (Optional): Filter users by username.
Description: Retrieve a list of users with optional filtering by username.
Replace User Fields at Once

Endpoint: PUT /users/<int:user_id>
Payload: JSON with updated user fields.
Description: Update all fields of a user at once.
Create Clients

Endpoint: POST /clients
Payload: JSON with client details.
Security: Requires ROLE_ADMIN.
Description: Create a new client, ensuring the uniqueness of the associated company.
Change Client Fields

Endpoint: PATCH /clients/<int:client_id>
Payload: JSON with updated client fields.
Description: Modify any single or multiple client fields.
Security:

The "Create Clients" endpoint is restricted to users with the "ROLE_ADMIN" role.
Database Schema
User Entity:

Fields: id, username, email, phone
ClientUser Entity:

Properties: id, client_id, user_id, created_at, updated_at, deleted_at, active
Company Entity:

Fields: id, name, users
Client Entity:

Fields: id, name, user_id, company_id, email, phone
Unit Tests
Single Company with More than 200,000 Employees

Check if there is only one company with more than 200,000 employees.
Role_USER Cannot Create User

Verify that a user with the role ROLE_USER cannot create a new user.
Create Client

Ensure that the creation of a client returns a success status code.
E-Commerce Companies in Result

Confirm that the result from listing clients includes Amazon and Google and no other E-Commerce companies.

	




